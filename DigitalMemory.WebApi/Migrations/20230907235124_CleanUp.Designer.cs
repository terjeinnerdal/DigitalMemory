// <auto-generated />
using System;
using DigitalMemory.WebApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DigitalMemory.WebApi.Migrations
{
    [DbContext(typeof(DigitalMemoryWebApiContext))]
    [Migration("20230907235124_CleanUp")]
    partial class CleanUp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DiaryEvent", b =>
                {
                    b.Property<Guid>("DiariesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventsId")
                        .HasColumnType("uuid");

                    b.HasKey("DiariesId", "EventsId");

                    b.HasIndex("EventsId");

                    b.ToTable("DiaryEvent");
                });

            modelBuilder.Entity("DiaryPerson", b =>
                {
                    b.Property<Guid>("DiariesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonsId")
                        .HasColumnType("uuid");

                    b.HasKey("DiariesId", "PersonsId");

                    b.HasIndex("PersonsId");

                    b.ToTable("DiaryPerson");
                });

            modelBuilder.Entity("DigitalMemory.WebApi.Models.Diary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Diaries");
                });

            modelBuilder.Entity("DigitalMemory.WebApi.Models.Entry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid?>("DiaryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DiaryId");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("DigitalMemory.WebApi.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EntryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LocationsId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntryId");

                    b.HasIndex("LocationsId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("DigitalMemory.WebApi.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("DigitalMemory.WebApi.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("DigitalMemory.WebApi.Models.Picture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EntryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntryId");

                    b.HasIndex("EventId");

                    b.HasIndex("LocationId");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("DigitalMemory.WebApi.Models.Video", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EntryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntryId");

                    b.HasIndex("EventId");

                    b.HasIndex("LocationId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("EntryLocation", b =>
                {
                    b.Property<Guid>("EntriesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LocationsId")
                        .HasColumnType("uuid");

                    b.HasKey("EntriesId", "LocationsId");

                    b.HasIndex("LocationsId");

                    b.ToTable("EntryLocation");
                });

            modelBuilder.Entity("EntryPerson", b =>
                {
                    b.Property<Guid>("EntriesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonsId")
                        .HasColumnType("uuid");

                    b.HasKey("EntriesId", "PersonsId");

                    b.HasIndex("PersonsId");

                    b.ToTable("EntryPerson");
                });

            modelBuilder.Entity("DiaryEvent", b =>
                {
                    b.HasOne("DigitalMemory.WebApi.Models.Diary", null)
                        .WithMany()
                        .HasForeignKey("DiariesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalMemory.WebApi.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiaryPerson", b =>
                {
                    b.HasOne("DigitalMemory.WebApi.Models.Diary", null)
                        .WithMany()
                        .HasForeignKey("DiariesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalMemory.WebApi.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DigitalMemory.WebApi.Models.Entry", b =>
                {
                    b.HasOne("DigitalMemory.WebApi.Models.Diary", "Diary")
                        .WithMany("Entries")
                        .HasForeignKey("DiaryId");

                    b.Navigation("Diary");
                });

            modelBuilder.Entity("DigitalMemory.WebApi.Models.Event", b =>
                {
                    b.HasOne("DigitalMemory.WebApi.Models.Entry", "Entry")
                        .WithMany("Events")
                        .HasForeignKey("EntryId");

                    b.HasOne("DigitalMemory.WebApi.Models.Location", "Locations")
                        .WithMany("Events")
                        .HasForeignKey("LocationsId");

                    b.Navigation("Entry");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("DigitalMemory.WebApi.Models.Picture", b =>
                {
                    b.HasOne("DigitalMemory.WebApi.Models.Entry", null)
                        .WithMany("Pictures")
                        .HasForeignKey("EntryId");

                    b.HasOne("DigitalMemory.WebApi.Models.Event", null)
                        .WithMany("Pictures")
                        .HasForeignKey("EventId");

                    b.HasOne("DigitalMemory.WebApi.Models.Location", null)
                        .WithMany("Pictures")
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("DigitalMemory.WebApi.Models.Video", b =>
                {
                    b.HasOne("DigitalMemory.WebApi.Models.Entry", null)
                        .WithMany("Videos")
                        .HasForeignKey("EntryId");

                    b.HasOne("DigitalMemory.WebApi.Models.Event", null)
                        .WithMany("Videos")
                        .HasForeignKey("EventId");

                    b.HasOne("DigitalMemory.WebApi.Models.Location", null)
                        .WithMany("Videos")
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("EntryLocation", b =>
                {
                    b.HasOne("DigitalMemory.WebApi.Models.Entry", null)
                        .WithMany()
                        .HasForeignKey("EntriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalMemory.WebApi.Models.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntryPerson", b =>
                {
                    b.HasOne("DigitalMemory.WebApi.Models.Entry", null)
                        .WithMany()
                        .HasForeignKey("EntriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalMemory.WebApi.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DigitalMemory.WebApi.Models.Diary", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("DigitalMemory.WebApi.Models.Entry", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Pictures");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("DigitalMemory.WebApi.Models.Event", b =>
                {
                    b.Navigation("Pictures");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("DigitalMemory.WebApi.Models.Location", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Pictures");

                    b.Navigation("Videos");
                });
#pragma warning restore 612, 618
        }
    }
}
